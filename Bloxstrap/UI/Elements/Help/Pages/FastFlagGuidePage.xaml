<ui:UiPage x:Class="Bloxstrap.UI.Elements.Help.Pages.FastFlagGuidePage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:models="clr-namespace:Bloxstrap.UI.ViewModels"
      xmlns:controls="clr-namespace:Bloxstrap.UI.Elements.Controls"
      xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
      xmlns:resources="clr-namespace:Bloxstrap.Resources"
      mc:Ignorable="d"
      d:DesignHeight="5500" d:DesignWidth="800"
      Title="FastFlag Guide"
      Scrollable="True">

    <StackPanel Margin="16" MaxWidth="750" >

        <!-- NOTE -->
        <TextBlock FontWeight="Bold" FontSize="18" Margin="0,0,0,8">NOTE</TextBlock>
        <TextBlock TextWrapping="Wrap" Margin="0,0,0,12">
    All explanations are from the Stoof server.
        </TextBlock>
        <Separator Margin="0,0,0,12"/>

        <!-- Recommended Buffering -->
        <TextBlock FontWeight="Bold" FontSize="18" Margin="0,0,0,8">Recommended Buffering</TextBlock>

        <TextBlock FontWeight="Bold" Margin="0,0,0,4">FIntRakNetResendBufferArrayLength</TextBlock>
        <TextBlock Margin="0,0,0,12">Default Value: 512</TextBlock>

        <TextBlock FontWeight="Bold" Margin="0,0,0,4">Align Buffering with Network Settings</TextBlock>
        <TextBlock TextWrapping="Wrap" Margin="0,0,0,12">
    To ensure proper buffering in Roblox, the <Run FontWeight="Bold">FIntRakNetResendBufferArrayLength</Run> value must match your system's buffering limit. This alignment prevents buffer overload.
        </TextBlock>

        <TextBlock FontWeight="Bold" Margin="0,0,0,4">Step 1: Check Your System’s Buffering Capacity</TextBlock>
        <TextBlock TextWrapping="Wrap" Margin="0,0,0,8">
    1. Open Device Manager (Win + X → Device Manager).&#x0a;
    2. Expand Network Adapters and select your active adapter.&#x0a;
    3. Click Properties and navigate to the Advanced tab.&#x0a;
    4. Locate Receive Buffers and note the value displayed.
        </TextBlock>

        <TextBlock FontWeight="Bold" Margin="0,0,0,4">Step 2: Synchronize with RakNet Resend Buffer</TextBlock>
        <TextBlock TextWrapping="Wrap" Margin="0,0,0,12">
    - If <Run FontWeight="Bold">Receive Buffers = 512</Run>, your system is synchronized with <Run FontWeight="Bold">FIntRakNetResendBufferArrayLength = 512</Run>, ensuring recommended buffering.
        </TextBlock>

        <TextBlock TextWrapping="Wrap" Margin="0,0,0,12">
    By ensuring that both values are properly aligned, buffering remains stable, preventing issues related to overload (BufferBloat), underload, or desynchronized resend handling in Roblox.
        </TextBlock>

        <TextBlock Margin="0,0,0,12">
    RakNet Explanation <Hyperlink NavigateUri="https://github.com/facebookarchive/RakNet" RequestNavigate="Hyperlink_RequestNavigate">Here</Hyperlink>
        </TextBlock>

        <TextBlock Margin="0,0,0,20">
    Buffering Explanation <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Data_buffer" RequestNavigate="Hyperlink_RequestNavigate">Here</Hyperlink>
        </TextBlock>

        <Image Source="pack://application:,,,/Resources/HelpPage/FastFlagGuide/BufferArray.png" MaxWidth="800" Stretch="Uniform" Margin="0,0,0,20"/>

        <Separator Margin="0,0,0,12"/>

        <!-- Rendering Mode -->
        <TextBlock FontWeight="Bold" FontSize="18" Margin="0,0,0,8">Rendering Mode</TextBlock>

        <StackPanel Margin="0,0,0,12">
            <TextBlock FontWeight="Bold">OpenGL:</TextBlock>
            <TextBlock FontFamily="Consolas" Padding="4" Margin="0,2,0,8">FFlagDebugGraphicsPreferOpenGL</TextBlock>

            <TextBlock FontWeight="Bold">Vulkan (may cause crashes if your GPU isn't in this <Hyperlink NavigateUri="https://vulkan.gpuinfo.org/" RequestNavigate="Hyperlink_RequestNavigate">list</Hyperlink>):</TextBlock>
            <TextBlock FontFamily="Consolas" Padding="4" Margin="0,2,0,8">FFlagDebugGraphicsPreferVulkan</TextBlock>

            <TextBlock FontWeight="Bold">DirectX 10 (may improve performance on older systems):</TextBlock>
            <TextBlock FontFamily="Consolas" Padding="4" Margin="0,2,0,8">FFlagDebugGraphicsPreferD3D11FL10</TextBlock>

            <TextBlock FontWeight="Bold">DirectX 11 (Roblox's default renderer):</TextBlock>
            <TextBlock FontFamily="Consolas" Padding="4" Margin="0,2,0,8">FFlagDebugGraphicsPreferD3D11</TextBlock>

            <TextBlock FontWeight="Bold">Metal (for macOS only):</TextBlock>
            <TextBlock FontFamily="Consolas" Padding="4">FFlagDebugGraphicsPreferMetal</TextBlock>
        </StackPanel>

        <TextBlock TextWrapping="Wrap" Margin="0,0,0,12">
    Note: You will NOT be able to use alt + enter while using Vulkan or OpenGL. Additionally, the 'future/unified' lighting feature will not be available on DirectX 10.
        </TextBlock>

        <TextBlock TextWrapping="Wrap" FontStyle="Italic" Margin="0,0,0,20">Explanation by 5070</TextBlock>

        <Separator Margin="0,0,0,12"/>

        <!-- Override Graphic Quality -->
        <TextBlock FontWeight="Bold" FontSize="18" Margin="0,0,0,8">Override Graphic Quality</TextBlock>

        <TextBlock FontWeight="Bold" Margin="0,0,0,4">DFIntDebugFRMQualityLevelOverride</TextBlock>
        <TextBlock TextWrapping="Wrap" Margin="0,0,0,12">
    This fast flag will cap your graphic settings at level 1 (you can change the 1 to any other graphic level you want it to be set to). To resolve the render distance issue, go to Settings &gt; Graphics, and adjust the slider to the highest setting available. After that, your render distance issue will be resolved; only your render distance will be affected, while other graphics settings, including textures, will remain unchanged.
        </TextBlock>

        <Image Source="pack://application:,,,/Resources/HelpPage/FastFlagGuide/QualityLevelOverride.png" MaxWidth="800" Stretch="Uniform" Margin="0,0,0,20"/>

        <TextBlock TextWrapping="Wrap" FontStyle="Italic" Margin="0,0,0,20">Explanation by EpikFailure</TextBlock>

        <Separator Margin="0,0,0,12"/>

        <!-- Texture Skipping -->
        <TextBlock FontWeight="Bold" FontSize="18" Margin="0,0,0,8">Texture Skipping</TextBlock>

        <TextBlock FontWeight="Bold" Margin="0,0,0,4">FIntDebugTextureManagerSkipMips</TextBlock>
        <TextBlock TextWrapping="Wrap" Margin="0,0,0,12">
    This setting lowers the quality of all textures, including custom textures such as those in Roblox Bedwars. 
    &#x0a;- 1: Good texture, but slightly blurry.&#x0a;- 2: Low-quality textures.&#x0a;- 3-4: Grey textures with blurry icons.&#x0a;- 5-8: Grey textures, with some icons removed.
    &#x0a;The effect of these values may vary depending on your PC.
        </TextBlock>

        <TextBlock TextWrapping="Wrap" FontStyle="Italic" Margin="0,0,0,20">Explanation by meddsam</TextBlock>

        <Separator Margin="0,0,0,12"/>

        <!-- Disable Full-Screen Title Bar -->
        <TextBlock FontWeight="Bold" FontSize="18" Margin="0,0,0,8">Disable Full-Screen Title Bar</TextBlock>

        <TextBlock FontWeight="Bold" Margin="0,0,0,4">FIntFullscreenTitleBarTriggerDelayMillis</TextBlock>
        <TextBlock TextWrapping="Wrap" Margin="0,0,0,12">
    This setting prevents the gray title bar from appearing when in full screen and moving your cursor to the top.
        </TextBlock>

        <Image Source="pack://application:,,,/Resources/HelpPage/FastFlagGuide/Titlebar.png" MaxWidth="800" Stretch="Uniform" Margin="0,0,0,20"/>

        <TextBlock TextWrapping="Wrap" FontStyle="Italic" Margin="0,0,0,20">Explanation by meddsam</TextBlock>

        <Separator Margin="0,0,0,12"/>

        <!-- Low Poly Meshes -->
        <TextBlock FontWeight="Bold" FontSize="18" Margin="0,0,0,8">Low Poly Meshes</TextBlock>
        <TextBlock TextWrapping="Wrap" Margin="0,0,0,12">
    Low-poly meshes are 3D models made with fewer polygons (shapes like triangles). Because they have less detail, they use less memory and are faster to load and render, which helps improve performance, especially on lower-end devices.
        </TextBlock>

        <Image Source="pack://application:,,,/Resources/HelpPage/FastFlagGuide/LowPolyMeshes.png" MaxWidth="800" Stretch="Uniform" Margin="0,0,0,20"/>

        <Separator Margin="0,0,0,12"/>

        <!-- Telemetry -->
        <TextBlock FontWeight="Bold" FontSize="18" Margin="0,0,0,8">Telemetry</TextBlock>
        <TextBlock TextWrapping="Wrap" Margin="0,0,0,12">
    Telemetry refers to the automatic collection of data about how the game or platform is being used, which is then sent back to Roblox’s servers. This data can include aspects such as how long you play, which games you visit, performance information (like lag or crashes), and how certain features are utilized. Additionally, Roblox game developers can implement their own telemetry to better understand how players interact with their games.
    &#x0a;&#x0a;The primary goal of telemetry in Roblox is to enhance the overall experience. It enables both Roblox and game creators to identify bugs, optimize performance, and make informed decisions about future updates based on actual player behavior.
    &#x0a;&#x0a;When you disable telemetry, Roblox stops collecting and sending some of that usage data. This action can increase your privacy and reduce background network activity. However, it also means that Roblox may have a harder time detecting issues specific to your device or improving your experience. Game developers might also miss out on valuable insights that could assist them in fixing bugs or balancing gameplay.
        </TextBlock>

        <TextBlock TextWrapping="Wrap" FontStyle="Italic" Margin="0,0,0,20">Explanation by meddsam</TextBlock>

        <Separator Margin="0,0,0,12"/>

        <!-- Reduce Lag Spikes -->
        <TextBlock FontWeight="Bold" FontSize="18" Margin="0,0,0,8">Reduce Lag Spikes</TextBlock>

        <TextBlock FontWeight="Bold" Margin="0,0,0,4">DFIntBandwidthManagerDataSenderMaxWorkCatchupMs</TextBlock>
        <TextBlock FontWeight="Bold" Margin="0,0,0,4">DataSenderMaxWorkCatchupMs</TextBlock>

        <TextBlock TextWrapping="Wrap" Margin="0,0,0,12">
    Roblox’s network debug overlay (Shift+F3) categorizes outgoing traffic for easier understanding. “Out Data” represents application-level data (e.g., RemoteEvent traffic), while “Out Physics” concerns replication (automatic updates of objects and physics). The engine can throttle each stream if it exceeds the budget. For example, if usage is low, the throttle is at 0%.
    &#x0a;&#x0a;The DFIntBandwidthManagerApplicationDefaultBps (64000) flag establishes the baseline for this throttling logic, ensuring that one category (like game remotes) doesn’t hinder core replication.
        </TextBlock>

        <TextBlock FontWeight="Bold" Margin="0,0,0,4">DFIntBandwidthManagerDataSenderMaxWorkCatchupMs (20)</TextBlock>

        <TextBlock TextWrapping="Wrap" Margin="0,0,0,12">
    <Run FontWeight="Bold">What it controls:</Run>&#x0a;This setting determines the maximum “catch-up” interval (measured in milliseconds) that the network data sender is permitted to process in one go if it falls behind. In simpler terms, if the Roblox networking task (responsible for sending updates to clients) experiences delays or lag, DataSenderMaxWorkCatchupMs caps the amount of backlog it attempts to send when it resumes operations. It serves as a throttle on how much delayed network work can be handled in a single frame or cycle.
    &#x0a;&#x0a;This feature smooths out network output and prevents extreme spikes. Without such a limit, a significant pause could lead to a substantial burst of packets as the server “catches up,” potentially saturating bandwidth or causing noticeable lag spikes for players. Additionally, setting this value too high might lead to large bursts and increased CPU usage, while setting it too low may cause persistent lag due to insufficient catch-up.
        </TextBlock>

        <Image Source="pack://application:,,,/Resources/HelpPage/FastFlagGuide/StablePing.png" MaxWidth="800" Stretch="Uniform" Margin="0,0,0,20"/>


        <Separator Margin="0,0,0,12"/>

        <!-- Large Replicator -->
        <TextBlock FontWeight="Bold" FontSize="18" Margin="0,0,0,8">Large Replicator</TextBlock>
        <TextBlock TextWrapping="Wrap" Margin="0,0,0,12" FontWeight="Bold" Padding="8" Text="
FFlagLargeReplicatorEnabled6
       
FFlagLargeReplicatorWrite5
       
FFlagLargeReplicatorRead5
"/>
        <TextBlock TextWrapping="Wrap" Margin="0,0,0,12">
    These flags are part of Roblox’s networking system and are used to facilitate sending and receiving large amounts of data between the client and server.
        </TextBlock>

        <TextBlock FontWeight="Bold" Margin="0,0,0,4">FFlagLargeReplicatorEnabled6</TextBlock>
        <TextBlock TextWrapping="Wrap" Margin="0,0,0,12">
    This flag activates the entire system, enabling Roblox to utilize what is known as the "large replicator." This system is designed to efficiently handle larger data packets. When too much data is sent at once, it can cause issues, but this feature helps to prevent such problems.
        </TextBlock>

        <TextBlock FontWeight="Bold" Margin="0,0,0,4">FFlagLargeReplicatorWrite5</TextBlock>
        <TextBlock TextWrapping="Wrap" Margin="0,0,0,12">
    This flag is used for sending data. When activated, it allows the system to send large packets without breaking them into smaller fragments. This capability is particularly beneficial for synchronizing substantial game states or player data.
        </TextBlock>

        <TextBlock FontWeight="Bold" Margin="0,0,0,4">FFlagLargeReplicatorRead5</TextBlock>
        <TextBlock TextWrapping="Wrap" Margin="0,0,0,12">
    This flag pertains to receiving data. It enables the client (or server) to properly read and handle those large packets upon arrival.
        </TextBlock>

        <TextBlock TextWrapping="Wrap" Margin="0,0,0,24" FontStyle="Italic">
    Overall, these flags are advantageous when a game or feature requires the transmission or reception of data that may be several kilobytes or larger. They ensure that the data flow remains smooth without causing disruptions or slowdowns.
        </TextBlock>

        <Separator Margin="0,0,0,16"/>

        <!-- RCore -->
        <TextBlock FontWeight="Bold" FontSize="18" Margin="0,0,0,8">RCore (Roblox Core)</TextBlock>

        <TextBlock TextWrapping="Wrap" Margin="0,0,0,12">
    This is the all-encompassing term for the underlying game engine that powers Roblox. It's the fundamental technology platform that handles game logic, physics, rendering, networking, asset management, data persistence, and security.
        </TextBlock>

        <TextBlock FontWeight="Bold" Margin="0,0,0,4">RCC (Roblox Client Core)</TextBlock>
        <TextBlock TextWrapping="Wrap" Margin="0,0,0,12">
    The client-side component of Roblox Core Engine, handling systems running on the player’s device such as physics simulation, rendering, and running game code.
        </TextBlock>

        <TextBlock FontFamily="Consolas" Padding="8" TextWrapping="Wrap" Margin="0,0,0,12">
{  
  &quot;DFIntSignalRCoreServerTimeoutMs&quot;: 20000,
  &quot;DFIntSignalRCoreRpcQueueSize&quot;: 2147483647,
  &quot;DFIntSignalRCoreHubBaseRetryMs&quot;: 10,
  &quot;DFIntSignalRCoreHandshakeTimeoutMs&quot;: 3000,
  &quot;DFIntSignalRCoreKeepAlivePingPeriodMs&quot;: 25,
  &quot;DFIntSignalRCoreHubMaxBackoffMs&quot;: 5000
}
        </TextBlock>

        <TextBlock TextWrapping="Wrap" FontStyle="Italic" Margin="0,0,0,24">
    Explanation by Scroom
        </TextBlock>

        <Separator Margin="0,0,0,16"/>

        <!-- Payload Limit -->
        <TextBlock FontWeight="Bold" FontSize="18" Margin="0,0,0,8">Payload Limit</TextBlock>
        <TextBlock TextWrapping="Wrap" Margin="0,0,0,24">
    In Roblox, "payload" refers to the actual data sent over the network, such as player movements, game events, or chat messages. To maintain performance and prevent lag or abuse, Roblox sets payload limits.
    Disabling the payload limit allows more data to be sent without restriction. This can be useful for testing or advanced use cases, but it also increases the risk of lag, crashes, or network issues, especially in multiplayer games.
    For most players, it’s best to leave this setting as-is unless there's a specific reason to change it.
        </TextBlock>

        <Separator Margin="0,0,0,16"/>

        <!-- Bypass Vulkan Requirement -->
        <TextBlock FontWeight="Bold" FontSize="18" Margin="0,0,0,8">Bypass Vulkan Requirement</TextBlock>
        <TextBlock FontWeight="Bold" Margin="0,0,0,4">FStringVulkanBuggyRenderpassList2</TextBlock>
        <TextBlock TextWrapping="Wrap" Margin="0,0,0,24">
    Offers a compatibility workaround for systems with faulty or unsupported Vulkan drivers by circumventing standard Vulkan GPU requirements. This solution is primarily intended for debugging or operating on non-compliant hardware and may lead to visual glitches or unstable performance.
        </TextBlock>

        <Separator Margin="0,0,0,16"/>

        <!-- Light Culling -->
        <TextBlock FontWeight="Bold" FontSize="18" Margin="0,0,0,8">Light Culling</TextBlock>
        <TextBlock FontWeight="Bold" Margin="0,0,0,4">FFlagDebugForceFSMCPULightCulling</TextBlock>
        <TextBlock FontWeight="Bold" Margin="0,0,0,4">FFlagFastGPULightCulling3</TextBlock>
        <TextBlock TextWrapping="Wrap" Margin="0,0,0,24">
    This feature helps the system decide which lights should affect objects in the scene, using the CPU or GPU. By skipping lights that don’t need to be rendered, it makes things run faster and allows more complex scenes to be handled efficiently, which could lead to input lag.
        </TextBlock>

        <Separator Margin="0,0,0,16"/>

        <!-- Maquette Frames Before Shown -->
        <TextBlock FontWeight="Bold" FontSize="18" Margin="0,0,0,8">Maquette Frames Before Shown</TextBlock>
        <TextBlock FontFamily="Consolas" Padding="8" TextWrapping="Wrap" Margin="0,0,0,12">
FIntMaquettesFrameRateBufferPercentage: 0, 10 (default), or 100
        </TextBlock>
        <TextBlock TextWrapping="Wrap" Margin="0,0,0,12">
    Determines how much extra time Roblox will add between making frames.
        </TextBlock>

        <TextBlock Margin="0,0,0,12">
    <Run FontWeight="Bold">0</Run> = no buffer — reduced input delay but might stutter
    <LineBreak/>
    <Run FontWeight="Bold">10</Run> = default — best smooth balance
    <LineBreak/>
    <Run FontWeight="Bold">100</Run> = big buffer — good for slower PCs, but input may feel slower
        </TextBlock>

        <TextBlock TextWrapping="Wrap" Margin="0,0,0,12">
    Buffer = extra time to get each frame done (similar to <Run FontWeight="Bold">DFIntMaxFrameBufferSize</Run>)
        </TextBlock>

        <TextBlock TextWrapping="Wrap" Margin="0,0,0,12">
    Less buffer = faster input feel but might stutter  
    More buffer = smoother frames but may feel slightly delayed
        </TextBlock>

        <TextBlock TextWrapping="Wrap" Margin="0,0,0,12" FontStyle="Italic">
    Works alongside FrameBufferSize. Both flags help one another.  
    "Maquette" typically refers to a rough model or layout used to communicate the design before it is fully developed.
        </TextBlock>

        <TextBlock TextWrapping="Wrap" Margin="0,0,0,24" FontStyle="Italic">
    This FFlag is similar to DFIntMaxFrameBufferSize, but instead of storing frames, this fastflag helps CREATE the frame before it is shown.  
    FIntMaquettesFrameRateBufferPercentage can directly improve DFIntMaxFrameBufferSize somehow.
        </TextBlock>

        <TextBlock TextWrapping="Wrap" Margin="0,0,0,0" FontStyle="Italic">
    Explanation by Dr. Plaguenstein / Scroom
        </TextBlock>

    </StackPanel>
</ui:UiPage>
